#include <zephyr/kernel.h>
#include <zephyr/drivers/spi.h>
#include <zephyr/drivers/dac.h>
#include <zephyr/logging/log.h>
#include <zephyr/device.h>
#include <stdio.h>

#include <zephyr/display/cfb.h>

#include "tdcs3.h"

LOG_MODULE_REGISTER(cmd_module);

#define CMD_THREAD_STACKSIZE 512
#define CMD_THREAD_PRIORITY 6

K_MSGQ_DEFINE(q_cmd_msg, sizeof(struct tdcs3_cmd_msg_t), 4, 4);
K_SEM_DEFINE(sem_cmd_module, 0, 1);

//static const struct gpio_dt_spec led_red = GPIO_DT_SPEC_GET(DT_ALIAS(led2), gpios);

//EXTERNS

extern struct k_msgq q_session_cmd_msg;

void cmd_handler_thread(void)
{
    struct tdcs3_cmd_msg_t cmd_msg;
    int i = 0;

    printk("\nCommand Handler Thread started\n");
    for (;;)
    {
        k_msgq_get(&q_cmd_msg, &cmd_msg, K_FOREVER);
        printk("\nGot from CMD Q\n");

        switch (cmd_msg.msg_cmd)
        {
            
            
            

        default:
            printk("INVALID COMMAND\n");
            break;
        }

        // data_service_send_file(0, 10000);
        // k_sem_give(&sem_send_data);

        k_sleep(K_MSEC(100));
    }
}

K_THREAD_DEFINE(cmd_handler_thread_id, CMD_THREAD_STACKSIZE, cmd_handler_thread, NULL, NULL, NULL, CMD_THREAD_PRIORITY, 0, 0);
