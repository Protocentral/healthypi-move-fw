#include <zephyr/kernel.h>
#include <zephyr/logging/log.h>
#include <zephyr/device.h>
#include <stdio.h>
#include <zephyr/drivers/gpio.h>

#include "tdcs3.h"

extern struct k_msgq q_session_cmd_msg;
extern bool global_session_in_progress;
// Buttons
/*
 * Get button configuration from the devicetree sw0 alias. This is mandatory.
 */
#define SW0_NODE DT_ALIAS(sw0)
#if !DT_NODE_HAS_STATUS(SW0_NODE, okay)
#error "Unsupported board: sw0 devicetree alias is not defined"
#endif

#define SW1_NODE DT_ALIAS(sw1)
#if !DT_NODE_HAS_STATUS(SW1_NODE, okay)
#error "Unsupported board: sw0 devicetree alias is not defined"
#endif

#define SW2_NODE DT_ALIAS(sw2)
#if !DT_NODE_HAS_STATUS(SW2_NODE, okay)
#error "Unsupported board: sw0 devicetree alias is not defined"
#endif

static const struct gpio_dt_spec button1 = GPIO_DT_SPEC_GET_OR(SW0_NODE, gpios, {0});
static struct gpio_callback button1_cb_data;
static const struct gpio_dt_spec button2 = GPIO_DT_SPEC_GET_OR(SW1_NODE, gpios, {0});
static struct gpio_callback button2_cb_data;
static const struct gpio_dt_spec button3 = GPIO_DT_SPEC_GET_OR(SW2_NODE, gpios, {0});
static struct gpio_callback button3_cb_data;

static struct k_work_delayable button1_activate;
static struct k_work_delayable button2_activate;
static struct k_work_delayable button3_activate;

#define DEBOUNCE_INTERVAL 1000

void button1_pressed(const struct device *dev, struct gpio_callback *cb,
                     uint32_t pins)
{
    printk("Button 1 pressed at %" PRIu32 "\n", k_cycle_get_32());

    gpio_pin_interrupt_configure_dt(&button1,
                                    GPIO_INT_DISABLE);
    k_work_reschedule(&button1_activate, K_MSEC(DEBOUNCE_INTERVAL));

    gpio_pin_interrupt_configure_dt(&button3,
                                    GPIO_INT_ENABLE);

    // session_resume_current();

    struct tdcs3_session_cmd_msg_t session_cmd;
    session_cmd.sess_cmd = CMD_SESSION_ABORT; // SESSION_CMD_START;
    session_cmd.session_id = 0;

    k_msgq_put(&q_session_cmd_msg, &session_cmd, K_MSEC(128));
}

void button2_pressed(const struct device *dev, struct gpio_callback *cb,
                     uint32_t pins)
{
    printk("Button 2 pressed at %" PRIu32 "\n", k_cycle_get_32());

    gpio_pin_interrupt_configure_dt(&button2,
                                    GPIO_INT_DISABLE);
    k_work_reschedule(&button2_activate, K_MSEC(DEBOUNCE_INTERVAL));
    // session_pause_current();

    struct tdcs3_session_cmd_msg_t session_cmd;
    session_cmd.sess_cmd = CMD_SESSION_PAUSE; // SESSION_CMD_START;
    session_cmd.session_id = 0;

    k_msgq_put(&q_session_cmd_msg, &session_cmd, K_MSEC(128));
}

void button3_pressed(const struct device *dev, struct gpio_callback *cb,
                     uint32_t pins)
{
    printk("Button 3 pressed at %" PRIu32 "\n", k_cycle_get_32());

    gpio_pin_interrupt_configure_dt(&button3,
                                    GPIO_INT_DISABLE);

    //k_work_reschedule(&button3_activate, K_MSEC(DEBOUNCE_INTERVAL));

    // if (global_session_in_progress == false)
    //{
    printk("Sending session start cmd");
    struct tdcs3_session_cmd_msg_t session_cmd;
    session_cmd.sess_cmd = CMD_SESSION_START_TES; // SESSION_CMD_START;
    session_cmd.session_id = 0;

    k_msgq_put(&q_session_cmd_msg, &session_cmd, K_MSEC(128));
    //}
    // else
    //{
    //    session_resume_current();
    //}
}

static void button1_activate_fn(struct k_work *work)
{
    gpio_pin_interrupt_configure_dt(&button1,
                                    GPIO_INT_EDGE_FALLING);

    printk("Button 1 activated\n");
}

static void button2_activate_fn(struct k_work *work)
{
    gpio_pin_interrupt_configure_dt(&button2,
                                    GPIO_INT_EDGE_FALLING);

    printk("Button 2 activated\n");
}

static void button3_activate_fn(struct k_work *work)
{
    gpio_pin_interrupt_configure_dt(&button3,
                                    GPIO_INT_EDGE_FALLING);

    printk("Button 3 activated\n");
}

void buttons_init()
{
    int ret;

    // Button 1
    if (!device_is_ready(button1.port))
    {
        printk("Error: button device %s is not ready\n",
               button1.port->name);
        return;
    }

    ret = gpio_pin_configure_dt(&button1, GPIO_INPUT);

    ret = gpio_pin_interrupt_configure_dt(&button1,
                                          GPIO_INT_EDGE_FALLING);

    gpio_init_callback(&button1_cb_data, button1_pressed, BIT(button1.pin));
    gpio_add_callback(button1.port, &button1_cb_data);
    // printk("Set up button at %s pin %d\n", button1.port->name, button1.pin);

    // Button 2
    if (!device_is_ready(button2.port))
    {
        printk("Error: button device %s is not ready\n",
               button2.port->name);
        return;
    }

    ret = gpio_pin_configure_dt(&button2, GPIO_INPUT);

    ret = gpio_pin_interrupt_configure_dt(&button2,
                                          GPIO_INT_EDGE_FALLING);

    gpio_init_callback(&button2_cb_data, button2_pressed, BIT(button2.pin));
    gpio_add_callback(button2.port, &button2_cb_data);
    // printk("Set up button at %s pin %d\n", button2.port->name, button2.pin);

    // Button 3
    if (!device_is_ready(button3.port))
    {
        printk("Error: button device %s is not ready\n",
               button3.port->name);
        return;
    }

    ret = gpio_pin_configure_dt(&button3, GPIO_INPUT);

    ret = gpio_pin_interrupt_configure_dt(&button3,
                                          GPIO_INT_EDGE_FALLING);

    gpio_init_callback(&button3_cb_data, button3_pressed, BIT(button3.pin));
    gpio_add_callback(button3.port, &button3_cb_data);
    // printk("Set up button at %s pin %d\n", button3.port->name, button3.pin);

    k_work_init_delayable(&button1_activate, button1_activate_fn);
    k_work_init_delayable(&button2_activate, button2_activate_fn);
    k_work_init_delayable(&button3_activate, button3_activate_fn);
}