#include <zephyr/kernel.h>
#include <zephyr/types.h>
#include <stddef.h>
#include <string.h>
#include <errno.h>
#include <zephyr/sys/byteorder.h>
#include <stdio.h>

#include "tdcs3.h"
#include "display_module.h"
//#include "../drivers/dac8562/zephyr/dac8562.h"

#include "../drivers/dac/dac8562/zephyr/dac8562.h"
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(session_module);

#define SESSION_THREAD_STACKSIZE 2048
#define SESSION_THREAD_PRIORITY 6

K_MSGQ_DEFINE(q_session_cmd_msg, sizeof(struct tdcs3_session_cmd_msg_t), 4, 4);

//extern struct device *dac_dev;

uint16_t session_tdcs_ramp_up_current_rate = 0;
uint16_t session_tdcs_ramp_down_current_rate = 0;
uint16_t session_tdcs_plat_current = 0;
uint16_t session_tdcs_plat_time = 0;
uint16_t session_ramp_up_total_time = 0;
uint16_t session_ramp_down_total_time = 0;

uint16_t session_tpcs_pw=0;
uint16_t session_tpcs_ipi=0;
uint16_t session_tpcs_plat_curr=0;
uint16_t session_tpcs_plat_time=0;

// uint16_t session_total_time = 0;

bool global_session_in_progress = false;
int global_session_progress_secs = 0;
int global_session_progress_current = 0;
bool global_session_paused = false;
enum session_stage global_session_stage;
bool global_high_impedance_detected = false;

static K_THREAD_STACK_DEFINE(tdcs_session_stack_area, SESSION_THREAD_STACKSIZE);
static struct k_thread tdcs_session_thread_id;
uint8_t sess_id = 0;

extern struct tes_sessions_t tes_sessions;
struct tes_session_t tes_session_default;
bool session_pause_initated = false;

void execute_tdcs_session(uint8_t session_id)
{
    // uint16_t total_points;
    //tes_sessions_load_all();

    tes_session_default = tes_sessions.tes_sessions[0];

    uint16_t ramp_up_rate = tes_session_default.session_tdcs_ramp_up_current_rate;
    uint16_t ramp_down_rate = tes_session_default.session_tdcs_ramp_down_current_rate;
    uint16_t plat_current = tes_session_default.session_tdcs_plat_curr;
    uint16_t plat_time = tes_session_default.session_tdcs_plat_time;

    uint16_t i = 0;
    uint16_t tmp_acc = 0;

    int currentImped = 0;
    int uACurrent = 0;

    session_tdcs_ramp_up_current_rate = ramp_up_rate;
    session_tdcs_ramp_down_current_rate = ramp_down_rate;
    session_tdcs_plat_current = plat_current;
    session_tdcs_plat_time = plat_time;

    session_ramp_up_total_time = session_tdcs_plat_current / session_tdcs_ramp_up_current_rate;
    session_ramp_down_total_time = session_tdcs_plat_current / session_tdcs_ramp_up_current_rate;
    // session_total_time = session_ramp_up_total_time + session_ramp_down_total_time + session_plat_time;

    global_session_in_progress = true;
    int s = 0;

    int session_progress_secs = 0;

    int session_runtime = 0;

    if (global_session_paused == true)
    {
        session_runtime = session_tdcs_plat_time - global_session_progress_secs;

        printk("\nSession is paused at %d | Rem: %d\n", global_session_progress_secs, session_runtime);
        global_session_paused = false;
    }
    else
    {

        printk("\nSession starting new\n");
        global_session_progress_secs = 0;
        session_runtime = session_tdcs_plat_time;
    }

    int session_time_counter = 0;
    // Ramp-up phase
    printk("\nStarting Ramp-up for %d \n", session_ramp_up_total_time);

    for (i = 0; i < session_ramp_up_total_time; i++)
    {
        uACurrent = tmp_acc;
        session_progress_secs = tmp_acc;
        //currentImped = get_impedance(uACurrent);

        //DACSetVoltage(dac_dev, 0, uACurrent);

        printk("TDCS Session ramping up: %d, %d uA / Imped: %d \n", i, uACurrent, currentImped);
        displayWriteSessionScreen(uACurrent, currentImped, session_time_counter, session_tdcs_plat_time, SESSION_STATE_RAMPUP);

        tmp_acc += session_tdcs_ramp_up_current_rate;
        session_time_counter++;
        k_sleep(K_MSEC(1000));
    }

    printk("\nStarting Plat\n");
    // Plateau phase
    for (i = 0; i < session_runtime; i++)
    {
        global_session_stage = SESSION_STATE_PLATEAU;
        uACurrent = session_tdcs_plat_current;
        //DACSetVoltage(dac_dev, 0, uACurrent);
        //currentImped = get_impedance(uACurrent);

        printk("TDCS Session plat running: %d, %d uA / Imped: %d \n", i, uACurrent, currentImped);
        displayWriteSessionScreen(uACurrent, currentImped, global_session_progress_secs, session_tdcs_plat_time, SESSION_STATE_PLATEAU);

        global_session_progress_secs++;

        if (currentImped >= 12)
        {
            printk("\nHigh Impedance detected. Pausing\n");
            global_session_paused = true;
            global_high_impedance_detected = true;
            break;
        }

        if (session_pause_initated == true)
        {
            global_session_paused = true;
            break;
        }

        k_sleep(K_MSEC(1000));
    }

    tmp_acc = session_tdcs_plat_current;

    printk("\nStarting Ramp-down\n");
    // Ramp Down phase
    for (i = 0; i < session_ramp_down_total_time; i++)
    {
        global_session_stage = SESSION_STATE_RAMPDOWN;
        tmp_acc -= session_tdcs_ramp_up_current_rate;
        // session_points[s++] = tmp_acc;
        uACurrent = tmp_acc;
        //DACSetVoltage(dac_dev, 0, uACurrent);
        //currentImped = get_impedance(uACurrent);

        printk("TDCS Session ramping down: %d, %d uA / Imped: %d \n", i, uACurrent, currentImped);
        displayWriteSessionScreen(uACurrent, currentImped, session_progress_secs, session_tdcs_plat_time, SESSION_STATE_RAMPDOWN);

        session_progress_secs++;
        k_sleep(K_MSEC(1000));
    }
    //DACSetVoltage(dac_dev, 0, 0);
    global_session_in_progress = false;

    if (global_session_paused == true)
    {
        session_pause_initated = false;
        // global_session_paused=false;
        if (global_high_impedance_detected == true)
        {
            display_session_paused_high_impedance(session_tdcs_plat_time - global_session_progress_secs);
            global_high_impedance_detected = false;
        }
        else
        {
            display_session_paused(session_tdcs_plat_time - global_session_progress_secs);
        }
    }
    else
    {

        session_pause_initated = false;
        display_session_ended();
    }
}

void execute_tpcs_session(uint8_t session_id)
{
    // uint16_t total_points;
    //tes_sessions_load_all();

    tes_session_default = tes_sessions.tes_sessions[0];

    uint16_t session_tpcs_pw = tes_session_default.session_tpcs_pw;
    uint16_t session_tpcs_ipi = tes_session_default.session_tpcs_ipi;

    uint16_t plat_curr = tes_session_default.session_tpcs_plat_curr;
    uint16_t plat_time = tes_session_default.session_tpcs_plat_time;

    uint16_t i = 0;
    uint16_t tmp_acc = 0;

    int currentImped = 0;
    int uACurrent = 0;
    
    session_tpcs_plat_curr = plat_curr;
    session_tpcs_plat_time = plat_time;
    // session_total_time = session_ramp_up_total_time + session_ramp_down_total_time + session_plat_time;

    global_session_in_progress = true;
    int s = 0;

    int session_progress_secs = 0;

    int session_runtime = 0;

    if (global_session_paused == true)
    {
        session_runtime = session_tpcs_plat_time - global_session_progress_secs;
        printk("\nTPCS Session is paused at %d | Rem: %d\n", global_session_progress_secs, session_runtime);
        global_session_paused = false;
    }
    else
    {
        printk("\nTPCS Session starting new\n");
        global_session_progress_secs = 0;
        session_runtime = session_tpcs_plat_time;
    }

    int session_time_counter = 0;
    // Ramp-up phase
    /*printk("\nStarting Ramp-up for %d \n", session_ramp_up_total_time);

    for (i = 0; i < session_ramp_up_total_time; i++)
    {
        uACurrent = tmp_acc;
        session_progress_secs = tmp_acc;
        currentImped = get_impedance(uACurrent);

        DACSetVoltage(dac_dev, 0, uACurrent);

        printk("TDCS Session ramping up: %d, %d uA / Imped: %d \n", i, uACurrent, currentImped);
        displayWriteSessionScreen(uACurrent, currentImped, session_time_counter, session_plat_time, SESSION_STATE_RAMPUP);

        tmp_acc += session_ramp_up_current_rate;
        session_time_counter++;
        k_sleep(K_MSEC(1000));
    }*/

    printk("\nStarting tPCS\n");
    // Plateau phase
    for (i = 0; i < session_runtime; i++)
    {
        global_session_stage = SESSION_STATE_PLATEAU;
        uACurrent = plat_curr;
        //DACSetVoltage(dac_dev, 0, uACurrent);
       //currentImped = get_impedance(uACurrent);

        printk("tPCS  Session running: %d, %d uA / Imped: %d \n", i, uACurrent, currentImped);
        displayWriteSessionScreen(uACurrent, currentImped, global_session_progress_secs, plat_time, SESSION_STATE_PLATEAU);

        global_session_progress_secs++;

        if (currentImped >= 12)
        {
            printk("\nHigh Impedance detected. Pausing\n");
            global_session_paused = true;
            global_high_impedance_detected = true;
            break;
        }

        if (session_pause_initated == true)
        {
            global_session_paused = true;
            break;
        }

        k_sleep(K_MSEC(1000));
    }

    tmp_acc = session_tdcs_plat_current;

    /*printk("\nStarting Ramp-down\n");
    // Ramp Down phase
    for (i = 0; i < session_ramp_down_total_time; i++)
    {
        global_session_stage = SESSION_STATE_RAMPDOWN;
        tmp_acc -= session_ramp_up_current_rate;
        // session_points[s++] = tmp_acc;
        uACurrent = tmp_acc;
        DACSetVoltage(dac_dev, 0, uACurrent);
        currentImped = get_impedance(uACurrent);

        printk("TDCS Session ramping down: %d, %d uA / Imped: %d \n", i, uACurrent, currentImped);
        displayWriteSessionScreen(uACurrent, currentImped, session_progress_secs, session_plat_time, SESSION_STATE_RAMPDOWN);

        session_progress_secs++;
        k_sleep(K_MSEC(1000));
    }
    */

    //DACSetVoltage(dac_dev, 0, 0);
    global_session_in_progress = false;

    if (global_session_paused == true)
    {
        session_pause_initated = false;
        // global_session_paused=false;
        if (global_high_impedance_detected == true)
        {
            display_session_paused_high_impedance(session_tdcs_plat_time - global_session_progress_secs);
            global_high_impedance_detected = false;
        }
        else
        {
            display_session_paused(session_tdcs_plat_time - global_session_progress_secs);
        }
    }
    else
    {

        session_pause_initated = false;
        display_session_ended();
    }
}

void session_start_new_tdcs()
{
    k_thread_create(&tdcs_session_thread_id, tdcs_session_stack_area, SESSION_THREAD_STACKSIZE,
                    (k_thread_entry_t)execute_tdcs_session,
                    (void *)&sess_id, NULL, NULL,
                    SESSION_THREAD_PRIORITY, 0, K_NO_WAIT);
    global_session_stage = SESSION_STATE_RAMPUP;
}

void session_start_new_tpcs()
{
    k_thread_create(&tdcs_session_thread_id, tdcs_session_stack_area, SESSION_THREAD_STACKSIZE,
                    (k_thread_entry_t)execute_tpcs_session,
                    (void *)&sess_id, NULL, NULL,
                    SESSION_THREAD_PRIORITY, 0, K_NO_WAIT);
    global_session_stage = SESSION_STATE_RAMPUP;
}

void session_pause_current()
{
    printk("\nSession Pausing\n");

    session_pause_initated = true;
    global_session_paused = false;
}

void session_control_thread(void)
{
    int i = 0;

    struct tdcs3_session_cmd_msg_t sess_cmd_msg;

    uint16_t program_ramp_up = 0;
    uint16_t program_ramp_down = 0;
    uint16_t program_plat_curr = 0;
    uint16_t program_plat_time = 0;

    uint16_t program_pw = 0;
    uint16_t program_ipi = 0;

    enum session_type program_sess_type;

    printk("\nSession Thread started\n");
    for (;;)
    {
        k_msgq_get(&q_session_cmd_msg, &sess_cmd_msg, K_FOREVER);
        printk("\nGot from CMD Q\n");

        switch (sess_cmd_msg.sess_cmd)
        {
        case CMD_SESSION_START_TES:
            //tes_sessions_load_all();
            tes_session_default = tes_sessions.tes_sessions[0];
            if (tes_session_default.sess_type == SESSION_TYPE_TDCS)
            {
               
                session_start_new_tdcs();
            }
            else if (tes_session_default.sess_type == SESSION_TYPE_TPCS)
            {
                session_start_new_tpcs();
            }
           

            break;
        case CMD_PROGRAM_SAVE_TDCS:
            // sess_cmd_msg
            memcpy(&program_ramp_up, &sess_cmd_msg.msg_args[0], 2);
            memcpy(&program_ramp_down, &sess_cmd_msg.msg_args[2], 2);
            memcpy(&program_plat_curr, &sess_cmd_msg.msg_args[4], 2);
            memcpy(&program_plat_time, &sess_cmd_msg.msg_args[6], 2);

            printk("\nReceived save TDCS program: %d %d %d %d \n", program_ramp_up, program_ramp_down,
                   program_plat_curr, program_plat_time);
            tes_session_save_session(0, SESSION_TYPE_TDCS, program_ramp_up, program_ramp_down, 0, 0, program_plat_curr, program_plat_time);
            break;
        case CMD_PROGRAM_SAVE_TPCS:
            // sess_cmd_msg
            memcpy(&program_pw, &sess_cmd_msg.msg_args[0], 2);
            memcpy(&program_ipi, &sess_cmd_msg.msg_args[2], 2);
            memcpy(&program_plat_curr, &sess_cmd_msg.msg_args[4], 2);
            memcpy(&program_plat_time, &sess_cmd_msg.msg_args[6], 2);

            printk("\nReceived save TPCS program: PW %d IPI %d I %d T %d \n", program_pw, program_ipi, program_plat_curr, program_plat_time);
            tes_session_save_session(0, SESSION_TYPE_TPCS, 0, 0, program_pw, program_ipi, program_plat_curr, program_plat_time);
            break;
        case CMD_SESSION_PAUSE:
            if (global_session_stage == SESSION_STATE_PLATEAU)
            {
                printk("Sending session PAUSE cmd");
                session_pause_current();
            }
            break;

        case CMD_SESSION_ABORT:
            printk("\nAborting command recd.\n");
            k_thread_abort(&tdcs_session_thread_id);
            //DACSetVoltage(dac_dev, 0, 0);
            display_session_aborted();
            k_sleep(K_SECONDS(2));
            global_session_progress_secs = 0;
            tes_session_load_default();
            break;

        default:
            printk("INVALID COMMAND\n");
            break;
        }

        // data_service_send_file(0, 10000);
        // k_sem_give(&sem_send_data);

        k_sleep(K_MSEC(1000));
    }
}

K_THREAD_DEFINE(session_control_thread_id, SESSION_THREAD_STACKSIZE, session_control_thread, NULL, NULL, NULL, SESSION_THREAD_PRIORITY, 0, 0);
// K_THREAD_DEFINE(session_thread_id, SESSION_THREAD_STACKSIZE, session_thread, NULL, NULL, NULL, SESSION_THREAD_PRIORITY, 0, 0);
