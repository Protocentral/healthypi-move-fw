/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 05.06.2023 06:57:35

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1536;
#else
constexpr int kTensorArenaSize = 512;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,287 } };
const TfArray<1, float> quant0_scale = { 1, { 0.18656054139137268, } };
const TfArray<1, int> quant0_zero = { 1, { -94 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[20*287] = { 
  -88, -82, -72, 14, -20, 10, -101, -87, -95, 18, 107, -59, -81, 104, 49, 116, 108, -38, 81, -76, 102, -107, 111, -87, -69, -69, -108, 48, -46, -42, -75, -105, 23, 104, 36, -49, -61, 80, 33, -12, 81, 116, 78, 61, -97, 35, -27, 56, -54, 19, 58, 93, -99, 93, 16, 25, 14, -23, -16, 4, 14, -32, -61, -32, -55, -32, 57, 54, -2, -89, 101, -71, -11, 10, -21, 110, 70, 88, -9, 70, 78, 53, 15, 77, -9, 32, -45, 38, -19, 83, 95, -91, 17, 60, 2, -39, 24, 45, 4, 114, -115, -61, 78, -57, -20, -95, 42, -92, 18, 35, 20, -17, -58, -14, -34, 6, 65, 17, -48, -23, 92, 57, 63, 108, 104, -110, 95, -64, 85, -86, 103, -113, -31, -61, 79, -38, -43, 119, 16, 70, 82, -42, -114, 58, 38, 114, 6, -83, 16, 58, 76, 54, -11, 52, 103, 86, 10, 25, -18, 99, -27, -53, -104, 86, -77, -111, 56, -98, -82, 117, -7, -24, -68, 77, 106, -75, 14, 47, 42, 111, 66, -74, 112, -92, -18, -98, -89, 87, -66, 39, 104, 117, -85, 109, -10, 67, -45, 54, 30, -54, -25, -99, 90, 73, 102, -28, 110, -101, -56, -74, 37, -31, 12, -55, 8, -24, -50, 28, -115, -95, 4, -110, 30, 83, 56, -76, -6, -30, 112, 105, -50, -24, 55, 66, 24, 15, 72, 29, 91, 89, -51, 45, -6, 23, 18, 109, 59, -20, 19, 101, -96, -96, -42, 4, -119, 7, -2, -14, 28, -4, 54, 60, 9, -6, -3, 110, -21, -38, -82, 57, 84, 102, -105, -100, 68, -92, 58, -59, 56, -55, -80, 119, 7, 88, -86, 113, 70, 
  12, 32, -3, -49, 25, 116, 80, 102, -91, 83, 68, -51, -20, -96, -63, -43, -40, -94, 87, 58, -4, -60, -90, -62, 43, -62, 34, 61, -58, 11, 100, 113, -110, -16, -103, 108, -34, 70, 87, -53, -55, 26, 29, 9, -93, -105, 35, -1, -17, -60, 78, 122, -103, -52, 112, -14, -101, 121, -19, -84, 106, 14, -61, 77, -35, -55, 46, -74, 76, -24, -115, 66, -26, -61, 67, 18, -86, -100, 72, -103, 96, -64, -96, -113, -48, -12, -91, 98, -38, -105, 104, -2, -96, -78, -115, 105, 9, 105, -113, -109, -10, 100, -65, 87, -64, 105, -85, 27, -33, -49, -52, 16, 59, -24, 91, -90, -98, -111, -91, 14, 59, -3, 23, -66, 47, -101, -111, 93, 73, -54, 13, -78, -83, -5, -28, 82, 58, 91, -32, 38, 48, 43, -1, 37, -82, -7, -112, 30, 34, 53, 46, -54, -64, 98, -28, -1, -89, -2, 48, -66, 1, -103, 51, 43, -53, 8, 95, -83, 50, 118, 114, -102, 82, -39, -66, 18, -55, 49, -75, -51, -9, 89, -76, 69, -27, 71, 20, -100, 79, -115, 89, 87, -84, 103, -107, -30, -73, 10, 103, 103, -25, -53, -109, -25, 36, -39, -57, 37, -57, 96, -59, 114, 38, 29, -65, -75, 85, -86, 28, -46, 81, -48, 108, -35, -34, 106, 43, -14, 1, 83, 121, -14, -79, -22, 105, -56, 17, -27, -108, 76, 59, -83, 69, 119, 83, 58, -40, -111, -50, 97, -76, 50, -13, 93, 69, -110, -80, 23, 25, 53, 83, 63, 114, -37, 53, 46, 14, 116, 107, 118, 79, -48, -71, -74, -8, 41, 109, -4, -25, -6, 70, -104, 118, 8, 13, -113, -1, 
  -1, -117, -94, 50, 0, 27, -113, -28, -74, 12, -40, -29, -88, -26, 63, -99, -81, -28, 99, -114, 80, -17, -60, 23, -53, 99, 12, -61, -19, -71, -78, 89, -104, 47, -80, 38, 28, -17, -58, -75, 97, -22, -4, -10, -28, 13, 83, -30, 119, -93, 110, -3, 22, -82, 75, 61, 73, 31, 36, 88, 42, -114, -104, 41, 54, -88, -56, 10, 62, 107, 86, 51, -44, 114, -40, 69, -82, -30, -88, -29, 28, -55, -86, 38, 97, 116, -11, 62, -84, 52, -38, 30, -114, -37, 117, 40, 79, -13, 56, -21, -87, 27, 74, -25, 67, 94, -75, 102, -17, -82, -6, 44, 25, -46, 107, 18, 82, -77, -83, -97, 119, 95, 68, 101, -98, -50, -33, -95, -90, -16, 58, -13, 5, 48, 60, -13, -45, -44, 16, 73, -13, -40, 13, -22, 101, -102, -112, -35, -60, 24, 82, -114, -76, -29, -82, -20, 27, -118, -114, 33, 6, 24, 93, -65, 54, 82, -101, -81, 27, 46, -41, -19, 89, 69, -98, 19, -116, -41, -4, -6, 11, 8, 119, -27, -115, 4, -67, 84, 78, -58, -5, -91, 35, -87, 72, -50, -54, 94, -111, -23, 101, -87, 117, 48, 58, -55, 112, -20, 59, 81, -25, -91, 38, 103, 93, -109, 13, 9, 8, 75, -30, -91, 99, 18, -19, -21, -110, 95, -8, 89, -112, -90, -1, 34, 10, -88, -5, 31, 54, 7, -5, 114, 59, -57, -80, -8, -2, -104, 83, -15, 33, 52, -119, -100, -32, -62, 70, -14, 30, -9, -7, 8, 16, 2, -32, -35, 63, 83, -107, 68, 101, -118, -87, -27, 71, -92, 93, 7, 105, -3, 19, 120, 45, 118, -72, 25, -41, 
  -116, -32, -94, 49, 31, 35, -83, 18, 18, 102, 1, -103, 19, 53, 10, -58, -32, -25, 112, 70, -119, -75, 119, -10, -16, 109, 8, -39, 90, 22, 0, 88, 8, -97, -27, 89, 28, -23, -88, 5, 7, -22, -28, 65, -89, -74, 88, -89, 67, 73, 100, -68, -46, 107, -109, -69, 63, 2, 76, -82, -110, -64, -25, 76, -66, 35, -36, -117, -114, 43, 56, -42, -1, -72, 14, -85, -101, 47, -58, 68, 69, -67, -66, 14, 62, 65, 91, -61, 101, -37, -5, -79, -46, 75, 70, -99, -90, -49, 66, -10, -24, -72, -91, 50, 21, 32, -8, -79, 47, -95, 50, -73, -40, -12, 26, 79, -11, 24, 22, 5, 48, -114, 118, -65, -27, -83, -76, 101, -112, -61, -63, -50, 93, 38, -86, -43, 94, 17, -99, 74, 33, 104, 14, -43, -59, 92, 64, -15, 107, 21, 73, 47, 31, -38, 111, -27, -9, -90, -59, -109, -4, 73, -93, 63, 102, -25, 23, 7, 99, 57, -88, 101, -101, 120, 104, 58, -71, 56, 100, -19, 104, -8, -63, 91, -72, 73, 102, -40, 0, -51, 0, -95, 54, 41, -41, -120, 65, 54, -43, -65, -75, -66, 108, -22, 17, 43, 72, 119, -41, 50, -97, -6, 85, -98, -108, -114, -99, -24, 69, -54, -9, -72, -110, 15, -115, 4, -31, -38, 58, 75, 109, 45, -52, -38, 60, 18, 98, -115, -85, -59, -88, -34, -9, 21, 76, -78, 14, 47, -109, 107, -53, -8, -91, -1, 83, -20, -20, 68, -70, -94, 113, 105, 17, 8, -88, 98, -119, -90, -104, -74, 115, -2, -39, 97, 14, 17, 30, 95, 33, -22, 2, 66, 86, 36, 119, -98, 9, 
  1, 67, -71, 74, 38, 106, -91, -46, 22, 36, 39, 4, -8, -25, -101, -5, -58, -53, 27, 22, 19, -48, -46, 27, -13, -54, 103, 48, 109, -1, 8, -63, -59, 66, -60, -45, 67, 61, -87, -61, 50, -97, -78, -32, -111, -6, 98, 90, 63, 38, 51, -107, 23, -65, 76, -25, 71, -92, 50, 33, -85, 25, -39, -69, 114, -8, 20, -77, -24, -115, -47, -8, -15, 25, 26, 44, 38, 30, -10, 110, -28, 59, 68, -72, 74, -4, -19, -54, -87, 102, -80, 48, 43, -46, 110, 0, -72, 47, 117, 13, -64, -20, -71, 115, -41, 24, -91, -38, -32, 66, 49, 81, -59, 107, -54, 23, 68, 111, -101, 92, -68, -10, -98, -19, 100, 101, 115, -104, -8, 40, -64, 32, 11, 47, 64, -84, -82, -119, 114, 31, 27, 102, 20, 111, -35, 29, -40, 86, 102, -71, -64, 19, 16, -26, 73, -64, -24, -119, -27, -12, -29, 91, -34, -97, -43, 29, 85, 67, 42, -93, 114, 113, 33, 49, 43, 118, 95, -105, 15, -104, 8, 70, 115, -31, -98, -104, 21, 111, 80, 48, -50, -1, -40, -14, -55, 69, 9, 67, -47, 75, -36, 75, 55, -10, -111, -85, 110, 18, 73, -11, 37, 99, -111, -10, 5, -61, 62, 21, -23, 93, 25, 53, 74, -106, -74, -60, -10, -57, 28, -71, -24, -111, 112, -57, 18, 36, -110, 107, 6, 3, 8, -23, -116, 89, -77, -5, -90, 5, -41, -17, 66, 30, 49, 6, 85, 15, -49, -62, 13, -95, -42, 95, 73, -94, 23, -55, -106, 39, 41, -109, -51, -11, -89, 88, -73, 58, -86, 19, 102, -93, -116, -9, 101, 85, -79, -83, 66, 
  60, -67, -22, -20, -3, 44, 29, 40, -2, -99, -58, -73, 109, -56, 87, 22, -61, 42, 80, 101, -58, -111, -23, -38, -81, 54, 20, -47, 65, 39, 54, 113, 6, 107, -34, 74, -12, 32, 116, -64, -4, 31, 102, 64, -34, 75, -110, 72, -19, -11, -19, 5, -39, -52, -19, 73, 31, -46, 75, 12, -25, -1, 98, 6, 25, -2, 74, 48, 21, -87, -115, -50, -59, -110, -59, -109, 29, 118, 42, 52, -106, 28, 33, 3, 117, 112, -38, 33, -85, -33, 36, 32, -105, 24, -86, 5, 52, 109, -84, 48, -2, -9, 20, 70, 82, -67, -6, -84, -43, 6, 8, 92, 74, -19, 47, -69, 12, -51, 70, -107, -79, -26, 25, 82, 21, 60, 60, -66, -57, 107, -44, 60, -60, -66, 94, -108, -40, 31, -11, 28, -18, -4, -77, -73, 83, 107, -32, -76, -30, -58, -12, 84, -81, 86, -93, -94, 18, -93, -44, -99, 23, 51, 14, -114, -11, 103, 12, 42, -111, -95, 26, 93, 112, 70, 100, 100, 95, -29, -118, 109, 5, 70, -36, 88, 49, 93, -42, -18, 39, -12, -46, -93, -72, 95, 113, -10, 89, 109, 110, -118, -96, -110, 38, -73, 115, -1, -66, -83, -61, 34, -72, -34, -70, -91, 96, -98, -19, -70, 85, 115, 72, 57, 112, 83, -79, 73, -43, -11, -40, 86, 6, -32, 2, -13, -57, 15, 41, -98, 50, -75, 113, 87, 61, -72, 83, -18, -15, -44, 103, -24, -104, 108, 33, 69, -22, 76, 72, 7, -104, -48, -76, 110, -5, -94, -42, -72, -66, 98, 42, -73, -37, 3, -82, 34, 19, -93, -68, 22, -108, 46, 72, -75, -65, -65, -4, 29, -31, 
  -89, 107, -15, -43, -46, 35, 35, -27, -55, 64, -99, -90, -118, -84, 103, 28, -25, 56, 32, -42, 22, -15, 109, -90, 30, 2, -58, 20, 30, -33, 53, -35, -74, -10, -43, -51, 27, 82, 11, -47, 93, 4, -103, -64, -18, -4, 87, 102, 63, 53, 42, 14, 80, -42, -112, 57, -67, 53, 8, 18, 46, -33, 18, -39, -49, -101, 38, -33, -54, -16, -107, 62, -21, 52, -46, -66, 28, 34, 94, 26, 56, 17, -40, 3, 59, -62, -50, 92, 105, 9, -44, -17, 3, 92, -106, 19, 75, -83, 110, 99, 39, -13, 71, 33, -13, -91, 54, -107, -91, -20, 108, 53, 64, 62, -69, 70, -99, -115, 26, -29, 77, -24, 8, -7, -80, 23, 109, -39, -31, -47, -50, -76, -27, -23, 74, 85, -73, -108, 31, 12, 69, -68, -95, -103, 100, 76, -26, 36, 112, 30, -20, -3, -2, -28, 34, 40, -31, 47, -104, 116, -112, 83, -38, -2, 116, -58, -115, -78, -94, 56, -78, 1, -81, -6, 113, 49, -111, 4, -79, 107, 98, -94, 113, -14, -91, 95, -16, -91, -50, -7, -68, 73, -94, -86, 68, 100, -21, 78, 73, -23, -32, 101, 74, -36, -81, 102, -78, -37, -72, 118, -86, 77, -75, 79, 20, 58, -96, 69, -19, -70, -104, 91, 23, -68, 120, -80, -110, -24, 69, -92, -61, 43, -51, 61, -56, -4, -42, 13, -71, 41, -108, 54, -61, -28, 1, 70, 26, -98, 16, -58, -23, -48, 55, -97, 81, 29, 58, 55, -80, -109, 62, 57, -69, -11, 42, 107, -19, 15, 83, 26, -52, 89, 95, -15, -60, -71, 46, -18, 111, 40, 85, 69, -84, 3, -53, 25, 99, 
  -39, 116, -80, -28, -98, 109, 17, -110, 95, -93, 75, -64, -86, -52, -66, -12, -2, -94, 7, -34, -37, -94, -114, -24, -19, -103, 83, 36, 43, 83, -105, 99, -105, -61, 12, 37, -117, 26, 51, 41, 14, -106, 75, -78, -78, 90, 52, 93, 25, 3, 108, 38, -54, 108, 47, 13, 0, 104, -38, -69, -18, 60, 35, 89, -106, 37, 48, -81, 75, -70, -112, 100, -39, 114, 42, 56, 17, 7, 96, 92, 84, 103, -13, -9, -69, 38, 81, -96, -91, 108, -107, -99, -115, -107, -86, -73, -119, -90, -78, 66, -109, -2, -107, 35, -6, 29, -13, 80, 66, -21, 101, 15, 80, -50, -13, 64, 3, 95, -60, 34, 24, 106, -111, -67, -91, 105, -52, -48, -47, 83, -13, -108, -104, 2, 114, -72, 78, -26, 93, 45, -81, -2, -75, -40, 33, 36, -47, -104, 46, 78, -117, -38, 13, 52, -46, 4, 23, -25, -85, 29, 44, 84, -3, -57, -102, -116, 49, 71, -26, -70, 39, -59, 58, -76, 73, -35, 105, 11, -73, 5, -73, 2, 41, 13, 18, -71, -37, -9, 62, -117, -15, 3, 41, 41, 107, 112, 45, -54, 94, -69, -20, 109, 99, -40, -80, -110, 93, 12, -15, 39, 29, -111, -100, 45, -106, -11, 118, -12, 116, 17, 120, 73, 97, -35, 80, 53, -111, -119, 83, -35, -2, 14, 101, 58, -109, 35, -114, -32, -79, -94, -119, 95, 68, -16, 53, -99, 54, -44, 93, -18, 69, -8, 25, -79, -112, 4, 19, 67, 34, 78, 49, 107, 65, -105, 94, -69, 1, -92, -105, -26, -92, -49, 113, 113, 36, 97, 46, 29, 22, 87, 100, 21, 29, 93, 39, 86, -117, 
  37, 48, 44, -114, 74, 55, -38, -24, 49, -94, -118, 112, 9, -46, -120, -73, 21, -21, 86, -1, -15, -34, -22, -63, -51, 105, -102, 27, 94, -2, -42, 44, -52, 47, 82, 37, -19, 13, -101, 29, 59, -98, -83, 79, -33, 7, 93, 58, -83, 101, -119, -89, 25, -83, -35, 0, -100, 41, 70, 34, -20, 87, -63, 117, 101, 104, -118, 17, 4, -120, 45, -79, 53, 117, -83, 108, 50, 64, 99, -18, -55, -30, 82, -41, 60, -11, 52, 43, 47, -23, 94, -20, -112, -30, 7, 47, -25, -108, 109, -87, 94, 76, 50, -113, -78, 51, 22, -95, -1, 48, -8, -29, -91, -43, 102, -76, 66, -116, 69, 57, -42, 12, 89, -94, 79, -84, -71, -52, 74, 113, -49, -106, -36, 44, 37, -78, 76, 13, 48, -61, 42, -68, -11, -67, 54, 41, 68, 99, -51, -59, 94, 117, 13, -12, -53, 91, -82, 58, -14, -74, -28, -39, 19, -36, -1, 73, -40, 29, -76, -26, -66, -37, -90, 53, -14, -80, -90, 102, 27, 88, 90, 63, 53, 94, 88, 15, -22, -89, 102, 50, -55, -69, -23, -52, 50, -54, -22, -85, 112, 118, 74, 17, 35, 41, -18, -26, -10, -3, -98, 111, -114, 42, 45, 94, 5, 61, 23, -24, 112, -35, -25, 105, -4, -59, -70, -42, -61, -115, -66, 91, 99, -45, 19, 120, 87, 20, 25, -77, -72, 57, 114, -61, 40, -92, 61, -55, 48, -29, 92, -93, -38, -71, -100, 32, 58, -85, 32, 4, 39, -5, -14, -44, -102, -103, 75, 111, -62, 13, 84, 2, 28, 22, -25, -99, 1, 85, -86, 102, -69, 74, -52, -40, 25, 1, 119, 5, 19, 
  -10, 27, 7, 53, -110, -1, -5, -41, 64, -17, 8, -34, -52, -1, 14, -46, 36, 110, 101, -92, 79, -71, -4, 104, 95, -84, -36, -70, 108, 72, -88, 40, 1, -83, -14, 105, -9, 92, -1, 90, -79, -47, 66, 73, 38, -88, 83, -8, -33, 88, -26, 122, -67, 120, 88, -109, -88, -43, 69, 39, -63, -38, 116, -73, 111, 103, 114, -62, 90, 55, 17, -46, -57, 27, 54, 6, 82, 83, 54, -71, 3, -89, -42, 39, -111, 62, -26, -38, 39, 15, -95, 36, 72, -81, -59, -17, 14, -79, -53, -76, 25, 21, 27, -62, -11, -29, -97, -64, -87, 119, -79, 10, 37, -95, -69, 25, 103, -17, -72, 122, 45, -24, -57, -97, 47, -1, 40, -15, 8, -95, 88, 84, 108, -113, -85, 123, -58, 78, 99, 39, 44, 123, -95, 68, -42, 41, -33, 24, 8, -28, 63, -64, 10, 44, -90, -32, -88, 122, 24, 115, 78, 18, -4, 40, -92, -106, 98, 10, -25, -85, -101, 115, 13, -77, 9, 122, 92, -54, 9, 25, -102, -86, -66, 118, 18, -52, 83, 4, -60, 64, -60, -57, -62, 51, 60, -61, -31, -33, -23, -2, -109, 14, -93, -75, 45, 63, -112, -13, 100, 80, -86, -9, -89, 78, 44, 40, -67, -80, -49, -61, -3, -112, 115, 112, 102, 57, 31, -38, -107, 13, 16, 49, -75, -41, 70, 75, -21, 85, -36, 21, -2, 66, -10, 92, -75, -15, -101, -114, -10, 17, -95, -64, 15, -14, -28, -51, -32, 108, 76, 77, -107, 0, -86, -66, 8, -63, -41, 68, 98, 44, -101, 123, 38, 22, -5, -80, -53, -76, 111, 5, 80, -70, 102, -12, -66, 39, 53, 
  -95, -98, -113, -89, 112, -40, 38, -4, 16, 80, 9, 101, 22, 100, -14, -87, -75, 72, -37, -13, -64, 6, 75, -107, -52, 38, -86, 66, 41, -98, 114, -21, -110, -2, 104, 44, -43, 14, -76, -12, -48, 6, 95, 103, 39, 76, 23, 72, -49, -111, 108, -57, -95, 2, 72, -76, 16, 98, -114, 109, -67, 23, 69, -104, -87, -59, 97, -31, -116, -61, -49, -18, -67, -61, 36, -56, -95, -102, 62, 76, 83, 106, -64, -97, -84, 64, 63, -67, 52, 78, 79, -22, 36, -7, 24, -67, 98, -10, 96, 95, -73, -36, 2, 70, -115, 38, 118, 114, 108, 61, -7, 50, -81, 40, -97, -48, -85, 71, 80, -114, 50, -19, 100, 36, 47, 60, -46, -43, -44, -115, -52, -61, -41, -89, 56, 80, -16, 18, 44, -48, 57, -60, -34, -95, -23, 12, -24, 96, -92, 63, 52, -53, -82, -54, -46, 58, -82, -78, -97, 70, 60, -60, -6, 56, 81, 57, -57, -59, 26, -25, 69, -101, -62, 24, 59, 69, 56, 2, 58, -47, 39, -22, -67, -46, -52, -41, 52, -96, 73, -88, 112, 70, -109, 67, 102, 35, 25, 71, -5, 108, 12, 44, 101, -25, -30, -58, 92, 35, 65, 77, 87, -37, 26, -82, -103, -18, -11, 92, -54, 40, 3, -25, -18, 24, -52, 27, 101, -19, -46, -80, 45, 32, -2, -24, -62, -50, 84, 70, -85, 100, -8, -36, -52, 55, 98, 29, 13, 103, 54, -39, -48, -12, -77, 93, -110, -37, 86, -46, 16, 72, -18, -4, 54, -14, 34, 11, 63, 32, -27, 36, -58, -46, -76, 112, -27, 97, 95, 23, 6, 66, -8, 57, 26, 93, 70, 31, -74, 
  99, 65, -5, -21, 12, 117, 30, 83, 91, 111, -26, 98, 15, -80, -71, 52, 17, 69, 91, 87, 59, -46, -4, 28, 83, -83, -25, 95, -75, 72, -104, 47, -78, -43, 85, -93, 96, 58, 96, -50, -49, -35, -118, -107, -101, -13, -118, 0, -5, 18, -29, -12, 96, 119, 114, -60, 93, 46, -111, 52, -30, -17, 74, 13, 11, 74, 86, -70, 42, 57, -81, -58, 3, 115, -40, 30, -77, 44, -66, -24, -92, -41, 49, 99, 29, -36, 85, 115, -51, -93, -6, 90, 36, -78, -104, -94, -7, 63, -26, -91, -109, -34, 82, -90, 48, 69, -71, 21, 76, -22, 6, -10, -99, -70, 48, -8, -55, 119, -89, -74, 73, 99, 68, 88, 102, 31, 2, -117, -77, 87, 120, 91, 67, 34, 34, 101, -23, 90, 62, -45, 88, -117, 91, 12, -31, 96, -23, 45, 28, -95, 44, -118, -91, 84, 16, -3, 37, 63, 27, 79, -93, -47, 95, 114, 102, -20, -67, -93, 81, -64, -22, 37, 18, -61, 69, -98, -117, 34, -78, 77, 27, -89, -96, -104, 69, -89, 12, -90, -35, -17, 14, 97, 103, 88, -109, -61, 3, 37, 97, -38, -62, -112, -43, 56, -42, 28, 52, -43, 106, 37, -116, 38, -110, 1, 52, -39, -41, -117, 18, -9, 61, -119, -84, 29, 84, -21, -115, 50, -57, -66, 84, -115, 45, 110, 29, 5, -63, 81, 93, 3, 45, -49, -106, 63, -40, 17, 83, 89, -44, 91, -42, 1, 118, -38, -116, 67, -100, -5, 55, -62, -98, -35, -62, -12, 75, 4, 96, -64, 99, -40, 37, -112, 65, 107, 47, 106, 80, 98, -25, 9, -104, -36, -71, 13, -35, 103, -3, 
  45, 81, 20, -67, 92, -38, 32, -52, -17, 110, -8, -58, -85, 98, 104, -114, 60, -7, -113, -25, -111, -24, 106, -20, -99, -14, -88, 36, 93, -50, 79, -40, -38, 99, -102, -66, -63, -13, -89, 109, -28, 26, 21, 90, -11, -51, 70, -50, -19, 49, -36, -42, -38, -91, 94, 80, 83, 2, 69, 49, -89, -69, 41, -15, -30, 74, 105, 100, 101, -96, -113, -95, 32, -12, -98, 82, 2, 36, -62, 48, 10, -11, 103, -15, -70, 74, -76, -26, -18, -35, 93, 58, -90, 26, 10, 101, -117, 66, -98, -94, 81, 116, -27, -72, -39, 89, 32, -17, 54, -11, -71, 69, 20, -58, -12, 104, 30, 42, 86, -116, -45, -7, -19, -76, -33, 82, 62, -92, -73, -12, -17, -93, -37, 26, 100, -86, 77, 79, 62, -25, 28, -117, 120, 69, 53, -10, -104, 107, 101, 104, 102, -52, -6, 48, 57, -31, 91, 108, -34, 85, 59, 68, 95, 34, -73, -2, 110, 69, 36, 63, -54, -65, 85, -84, 3, 48, -117, 95, 87, -90, -20, -118, 19, 5, -33, 42, 69, 51, 96, -58, -83, -7, 104, 50, 92, 44, -13, 109, -63, -16, 81, 118, 68, -5, -84, -118, 52, -90, -96, 91, 43, 99, 83, -61, 97, -20, 59, -119, 93, 16, -35, 22, -109, -94, 102, 48, -112, 61, -64, 26, -32, 108, 87, -81, -80, 5, -111, -3, 5, 19, -109, 108, -99, -66, -8, -52, 83, -22, 22, 31, 13, -114, 8, 18, -56, 95, -78, 98, -91, 35, 93, -93, 29, 99, 57, 86, -12, 36, -103, -51, 76, -64, 76, -40, 23, -68, 80, 16, -61, 67, 31, -28, 69, 96, -9, 79, -54, 
  13, 29, -34, 80, 15, -29, 58, -23, 36, 89, 115, 104, 57, -49, 5, 25, -70, -62, 32, 96, -116, -44, 49, -47, -117, 95, 66, 21, 103, -53, -117, 120, 35, 57, 82, 58, 106, -70, 67, -110, -37, -8, 79, -34, -68, 10, -65, -8, -2, 111, -76, -73, -13, -26, 76, 69, 23, 111, -108, -51, -3, 5, 115, -17, 0, 77, 41, 76, -120, 103, 93, -95, 1, 43, 108, -88, 44, 28, -39, 119, 30, -62, 65, -18, 71, 62, 76, -67, -82, 115, -26, 73, -77, -22, 56, -12, 71, 73, 85, 78, -90, -5, -37, -118, 1, -68, 60, -13, -111, 114, 103, -96, 78, 11, 38, -72, -61, -118, -84, -70, -83, 16, -67, 9, -99, 36, -32, 7, 58, -49, -65, -2, 100, 74, -35, -60, -55, 9, -6, -73, 108, -97, -34, -84, 37, 3, -97, 65, 110, -25, 24, -36, -96, -107, -49, 8, 52, 73, 55, -19, 39, -56, -94, 62, -105, 64, -88, -89, 12, 41, 75, 13, 26, -114, 118, 80, 119, -48, 25, -75, 64, -25, 71, -60, 9, 66, 116, 98, 56, 19, -111, -55, 97, -104, -23, -90, -19, -112, 88, -119, -1, -13, 112, -57, 107, 109, -85, 111, 115, -118, 50, -36, 66, -36, -36, 64, -24, -78, -114, 42, 25, -120, 47, -61, 48, -30, 104, 6, -87, -34, -86, 1, 4, 42, 106, 77, 114, -113, 35, -60, -3, -101, 102, 79, 120, -5, 10, -119, 117, -63, 61, 32, 6, -10, -7, 103, 24, 6, 65, -31, -15, 48, 100, -16, -18, 56, -106, -27, -101, 57, -101, -74, -11, 87, 107, -17, 30, 53, 82, -67, 102, -65, -49, -76, 5, 90, -112, 
  -99, -105, 104, -25, 100, -37, 63, 75, 13, -43, -99, -19, -96, -30, 15, -15, -62, -51, -46, -64, 30, 53, -65, 45, 69, 6, -87, -16, -49, 9, 20, -1, 87, 81, 99, -111, 33, 14, -84, -37, 3, -91, 85, -102, -41, 3, 79, -110, 88, 16, -85, 10, 73, 60, -17, -52, -41, 16, 90, 97, -112, 78, -23, -27, -108, 13, 73, 107, -84, -105, 87, -16, 96, 7, -33, 36, 98, -9, -28, -2, 60, -107, -47, 59, -43, 74, -23, 65, -89, -63, 38, 123, 81, -88, 71, -6, -111, -26, 3, -59, -62, -56, -117, -34, -75, -82, -55, -85, 98, 100, -113, 60, 32, 29, -35, -53, 60, 18, -45, -98, -33, -34, -32, 44, 0, -97, -114, -107, -65, 86, -85, -35, -17, 17, 55, 53, -62, 41, 83, -45, 66, 15, -28, 46, 27, 11, -29, 6, 83, 25, 117, -107, -112, 41, 5, -54, -92, 32, -98, 64, 106, -59, -40, 118, 113, -93, -104, 58, 45, 56, -75, 122, -45, 37, 17, -114, -100, 60, -16, 34, 116, 11, 24, 27, 17, -62, 65, -77, -79, 18, -85, -95, -32, 19, 75, -56, 23, 26, 70, -103, 51, 49, 49, 33, 111, -90, -93, 105, -92, 39, 90, 89, -70, -54, 23, -90, 57, -51, 51, 46, -28, 48, 98, 85, -32, -90, 65, 3, -86, -110, -50, -29, 97, 17, 117, -5, 107, -88, -74, 99, 123, 0, -21, 7, -10, -44, -30, -86, 111, -81, -57, -103, -29, -53, 75, -6, 57, -44, 94, 77, -116, -76, 113, -41, -84, 37, -91, -99, 11, 47, 86, -66, 6, 105, -13, -78, -17, 116, 118, -33, -73, 116, 49, -43, 64, 70, 80, 
  -73, 114, -37, 41, -29, 103, -72, -59, -16, 96, -70, 55, -48, -34, 117, -90, -10, 81, 73, 82, 28, -52, 29, -95, -54, -35, 72, 43, 11, 11, -110, -97, -104, 70, 77, -38, -31, 74, -5, 89, 100, -69, 94, -14, -47, 70, -110, 111, -43, 80, -15, 66, 29, 40, 23, 66, -14, -48, -17, -97, 69, -62, -89, -44, -8, 57, -65, -106, -111, -34, 97, -20, 31, -60, -49, 90, -49, -49, -85, 117, 23, 114, 75, -62, -34, -109, -55, 60, 63, 111, -98, -8, 4, -45, 56, -2, -108, -49, -6, 2, -55, -106, 31, -52, 18, 107, -49, 10, 41, -12, 109, 67, -119, 87, 108, -53, -63, 118, 93, -79, 39, 115, 87, 108, 5, -10, 19, -17, -83, -67, -54, -11, -55, -5, -12, -32, 10, -20, 82, -58, -82, -26, -118, 27, -40, 32, -24, 15, 112, -101, -108, -28, 118, -67, -75, -119, 94, -34, 60, -52, -115, 40, -108, 66, 17, -116, 74, -114, -105, -38, 103, 77, 4, -113, -18, 55, 82, -11, 66, 54, 53, -37, 35, 96, 19, -113, 59, -2, -120, 80, 18, -66, 119, 61, 87, 87, -54, 73, 42, 97, -71, -20, 58, 43, 20, 47, -91, 20, -116, -1, -19, -112, -22, 22, 38, -74, 76, 120, 2, 105, 50, -64, -91, 46, -95, -42, -2, 92, 29, -1, 44, 3, 75, -88, 28, 41, 110, -26, 108, 49, 23, 7, -2, -36, 57, -110, -59, 39, 99, 97, -69, -114, -78, -118, 66, -48, -103, 91, -115, 107, 4, 20, 87, -76, 36, 74, -75, -115, 73, 74, -27, 62, -45, 40, 108, -63, 60, -92, 103, 25, -26, 104, 46, -106, 7, 102, -31, 
  -56, 87, 87, -16, -51, -4, -14, -57, -14, 38, 5, -95, -67, -107, -79, 54, 82, 56, -103, -18, -59, -109, -55, 90, 75, 46, -25, 14, 118, 110, 8, -22, -12, 73, 28, 31, -13, -40, -95, 46, 29, 113, -71, -91, 48, 33, 56, 80, 110, 27, 102, 92, -22, 32, -31, 15, -100, -20, 4, -55, -55, -43, -31, 108, -31, -42, -20, 39, 4, 115, -47, -93, 77, -20, 27, -112, 94, 27, 62, 113, 56, 115, 44, -115, 40, 57, 2, -83, 45, -33, -112, 94, 99, 64, -69, -60, 99, 79, 118, 79, 118, 69, -109, -13, 40, 20, -110, 44, 46, -5, 81, -63, -67, -104, 35, -72, -107, 34, 20, 97, 35, -117, -33, 106, 52, -4, -48, 47, -74, -81, 105, 69, -51, 74, 116, -112, -101, -19, -38, 107, 28, 63, -88, -68, 107, -32, -37, 61, 10, 14, 50, 0, -67, -73, -122, -77, -26, -17, -6, 6, 72, 118, 94, -103, -23, -92, -21, 54, 28, -118, 35, 94, 18, -120, 55, -12, -4, 110, -29, -119, -70, -83, 52, 76, -31, 91, -69, -20, 37, 69, -82, -8, -65, 13, 53, 28, -26, -27, -88, 104, 94, 59, 35, -59, -25, 3, -23, 60, 87, 55, -42, -103, -109, -103, -94, 59, -100, 15, -84, 76, 110, 5, 12, -11, -97, 34, -26, 117, -66, -118, -55, -30, 93, -94, 18, 72, -53, 65, 67, -101, 44, -50, 105, -44, 81, 113, -57, -28, 62, -4, -103, 27, -35, -18, -29, -72, -113, -4, 10, -89, -49, 70, -22, 103, 46, -102, 44, -116, -73, 107, -73, 85, 2, -23, 3, -19, -62, 77, -19, 18, 103, -43, -34, -113, -48, 5, -31, 
  -53, 6, -113, -102, 105, -50, 20, 85, -68, 9, 11, 51, 25, -36, -19, -35, 5, -19, -63, 95, -108, -33, 67, -97, 105, -14, -84, 115, 70, 62, 70, 21, 21, 27, -106, -110, 107, 21, -97, 21, -92, 76, -90, 91, 113, 108, 73, 103, 13, -86, -49, 79, -55, 107, 112, -79, -11, -35, 47, -97, 90, -30, 78, 91, 102, -36, -42, -51, -13, 25, 88, 80, -115, -105, 57, 90, -99, -40, 74, -111, 80, -117, -51, -117, 85, -7, 106, -103, -56, -83, 11, -90, -96, 94, 115, -64, 73, -88, 69, 67, 36, 118, 104, -63, 11, -26, -26, 57, -30, -55, 86, 100, 94, 22, 60, 59, 21, -60, 120, 46, -14, 54, 50, 120, -48, -70, -77, -43, -4, -66, -54, 42, 117, 114, 103, 73, -64, 60, 114, -29, 111, -111, 95, 16, 40, 65, 50, -12, -18, 53, 33, 83, 41, -50, -65, -103, 0, -4, -47, -16, 38, 11, 43, -107, 76, -54, -88, -78, -49, -45, 19, 99, -111, 84, 92, -58, 24, -90, -99, -90, -25, 4, 67, -51, -69, -12, 35, -57, 87, -72, -87, 6, -63, 96, -24, -84, -65, 3, -99, 69, 1, -20, 97, 105, -108, -83, 9, 119, -42, 3, -23, 61, 74, -5, -1, -112, -105, 19, -120, 91, 50, -43, -35, -23, 37, 84, -67, -17, 95, -60, -24, 41, 59, 45, -92, 1, 47, -69, 52, -29, 2, -76, 109, 49, 0, 13, -70, 23, -85, -99, 46, -80, -3, -45, 61, 22, 68, -116, -98, 120, -72, -58, -65, 78, 111, -117, 117, -73, -38, 72, 35, -87, -111, 66, -35, -116, -42, 102, 88, 90, 4, -23, 69, 6, -7, -1, -74, 
  -82, -28, 98, 116, 100, 40, -8, -86, -37, -35, -106, -85, 83, -17, -57, 78, -52, -25, -104, -25, 70, -108, -40, 112, -81, -105, 84, -38, 17, -13, 61, 40, 92, 7, 46, 72, 46, -20, 22, 67, -46, -122, 29, -52, 108, 88, -94, 49, 58, 5, 6, -105, -90, -58, 40, -90, 11, 42, -117, 31, 7, -35, 112, -100, 83, 39, -95, 101, -90, 62, 34, -67, -12, -102, 101, -78, -72, -73, 60, -69, -95, 58, -57, -112, -121, -67, -1, 23, -62, 18, -68, 104, 20, -64, 18, 99, 12, 111, -26, 22, -81, -68, -41, 102, -73, 50, -69, -47, 35, 54, -34, 108, 97, 102, 25, 54, 92, 91, 49, 89, 31, -36, -87, -75, 114, -46, -117, -50, -96, -90, 101, -108, -51, -38, -91, 9, -70, -17, -83, 109, 57, -52, 87, 91, 113, -88, 27, 59, -115, 13, 30, -91, 13, -13, -86, 90, -103, 62, -91, 45, 99, 96, -113, 43, -55, -74, 24, 39, -6, 71, 66, -33, 76, 71, -72, -82, 95, -12, 65, 39, -73, -87, 47, -38, -103, -42, 92, 72, -61, -53, -30, -59, -105, -18, 39, -54, -77, 74, 64, 65, -28, -61, -119, 11, 58, -26, 13, 72, -67, 98, -72, 103, -73, 28, 26, -58, -70, -109, -68, -55, -86, 51, -7, -46, 38, -108, 5, -7, -54, -119, -34, 40, 75, -47, 106, 79, 104, -3, 105, -114, 113, 36, 84, -95, -13, 31, 25, -51, 94, 90, -48, 110, -103, 77, -72, -30, -53, 87, -73, -45, -109, 35, 43, 1, 26, 64, 0, 38, -55, 6, 57, -53, -7, -121, -63, -73, 29, 63, 91, 74, 59, -80, 26, 14, 107, -57, 83, 
  -7, 41, 96, 46, 1, -9, -3, -106, 101, 104, -32, 87, -12, -39, 94, 34, 24, -115, 29, -23, -43, 60, 97, -109, 77, 108, -4, 109, -106, -119, -115, -88, 116, 56, 32, 9, 88, -62, 57, -31, -96, -53, 107, 42, -72, 13, -22, 78, -60, -127, 95, 77, -43, -41, -46, -1, 94, -110, 14, -48, 25, -92, 27, -95, -72, 90, 107, 76, 11, -75, 84, -73, 6, -53, -107, 73, 57, 25, -39, 90, -5, 98, -28, 18, -107, 114, -13, 92, -113, 64, -41, -7, 52, -108, 64, 92, 30, 113, 115, 101, -29, 25, 77, 57, 76, -71, 8, 5, 3, 66, -81, -113, 113, 111, 26, -124, -54, 104, 72, 51, -26, -10, 70, 70, 61, 106, -82, -31, 111, 94, -125, 98, -33, 67, 65, -49, -47, -16, -64, -19, -92, 9, 80, -98, 40, -81, -31, 113, -111, 78, 85, -86, -118, -68, -113, -120, -100, 74, 106, 115, -121, 2, 112, 12, -103, -102, -63, -97, 66, 19, -53, -11, 62, -92, 15, -72, -27, -77, -100, -125, 7, 90, -10, -122, -41, 4, -101, -20, -58, -55, -94, 26, -31, -84, -72, -43, 69, 4, -121, -22, 13, -5, -56, 76, 49, -103, -52, -12, -74, 14, -89, -113, 98, 59, 53, -97, -67, 39, 68, 79, -90, 26, -115, -30, 98, 24, -46, -89, -95, 106, -59, 54, -19, -8, 57, 79, 110, -44, -115, -33, 77, 87, 2, 84, 71, -125, 25, -36, -80, -42, 92, -72, -33, 53, 60, 106, 21, -18, -95, 76, 105, -30, 94, -3, -25, -56, -32, 10, 67, 12, 14, 17, -54, 103, 104, -10, -37, -110, 109, 13, -41, -65, -12, -10, -41, 27, -28, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 20,287 } };
const TfArray<1, float> quant1_scale = { 1, { 0.001163603737950325, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[20] = { 0, -25, 0, 0, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0, -56, 0, 58, 0, 18, 61, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00021708254644181579, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[10*20] = { 
  -79, -4, 35, 21, 104, -75, -33, 22, -104, -113, -39, -69, 111, 100, -35, 1, -108, 17, -37, 15, 
  -81, 18, -62, 48, 30, 11, 86, -54, -45, -89, 20, -96, -29, -38, -95, -107, -51, 81, 60, -106, 
  -97, 84, 30, -62, 79, -2, 52, -55, 98, 92, -72, -56, 39, -117, 37, -40, -30, 121, -111, -37, 
  -81, -23, -75, -101, -18, 57, 79, 93, 108, -91, 95, 48, 2, -79, -29, 121, 27, 35, 32, -83, 
  18, 9, -67, -94, -123, 106, -43, -7, -73, 121, 6, -121, -107, 45, -21, 23, 16, -111, 121, 24, 
  75, 100, -98, 11, -85, -24, 4, -28, 117, -116, -127, 117, -95, 57, -62, 97, -106, -10, -106, 87, 
  98, -37, 14, 97, 77, -34, 15, 57, 52, 107, -60, 73, -124, -11, -7, -11, 52, -26, 45, -55, 
  -67, 109, -69, -118, -25, -20, -36, -100, 107, 81, 79, 113, -22, -6, -29, -47, -72, 20, -53, 54, 
  -84, 80, 9, 57, 115, -4, 70, -119, -27, -89, 51, 91, 110, 123, -20, 59, -98, 112, -2, 5, 
  -34, 38, 26, 95, -90, 73, 87, -68, 94, -43, -24, 37, -104, -41, -96, 27, 127, 115, -40, 119, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 10,20 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0034799396526068449, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[10] = { 0, 0, -43, 0, -69, 0, 41, -38, 0, 111, };
const TfArray<1, int> tensor_dimension4 = { 1, { 10 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00012737311772070825, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[3*10] = { 
  -38, -114, -112, 103, 57, -4, 48, 39, -93, -12, 
  74, -11, 104, -85, 60, 1, -3, 48, 86, 16, 
  -127, -12, 8, 68, 80, 30, -30, -10, 24, -67, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0052981642074882984, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[3] = { 40, 3, -89, };
const TfArray<1, int> tensor_dimension6 = { 1, { 3 } };
const TfArray<1, float> quant6_scale = { 1, { 8.1684280303306878e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.03660210594534874, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.01541746873408556, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0060606128536164761, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 287, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 5740, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
